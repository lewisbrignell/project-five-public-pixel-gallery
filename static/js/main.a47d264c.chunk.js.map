{"version":3,"sources":["firebase.js","Section1.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Section1","hideSection1","event","preventDefault","document","getElementById","style","left","getElementsByTagName","overflow","generateButtons","tempArray","x","push","generateDefaultColours","changeButtonValue","position","target","id","colourArray","state","buttonPixelColours","selectedColour","setState","changeSelectedColour","value","changeTitle","title","changeName","authour","publishArt","newArtObject","name","maker","database","ref","alert","buttonArray","buttonPixels","className","onClick","this","action","map","thing","key","background","htmlFor","type","defaultChecked","placeholder","maxLength","required","onChange","Component","PPGApp","displaySection1","pixelArtArray","on","data","artArray","artPiece","val","artItem","colour","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0TAaAA,IAASC,cAVc,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,cACnBC,MAAO,6CAKIR,QAAf,EC2MeS,E,YA7MX,aAAe,IAAD,uBACV,+CAeJC,aAAe,SAACC,GACZA,EAAMC,iBACUC,SAASC,eAAe,YAChCC,MAAMC,KAAO,SACrBH,SAASI,qBAAqB,QAAQ,GAAGF,MAAMG,SAAW,UApBhD,EAwBdC,gBAAkB,WAGd,IAFA,IACMC,EAAY,GACTC,EAAI,EAAGA,EAFJ,IAEaA,IACrBD,EAAUE,KAAKD,GAEnB,OAAOD,GA9BG,EAmCdG,uBAAyB,WAIrB,IAHA,IACMH,EAAY,GAETC,EAAI,EAAGA,EAHJ,IAGaA,IACrBD,EAAUE,KAFK,QAInB,OAAQF,GA1CE,EAiDdI,kBAAoB,SAACb,GACjBA,EAAMC,iBACN,IAAIa,EAAWd,EAAMe,OAAOC,GACxBC,EAAc,EAAKC,MAAMC,mBAC7BF,EAAYH,GAAY,EAAKI,MAAME,eACnC,EAAKC,SAAS,CACVF,mBAAoBF,KAvDd,EA6DdK,qBAAuB,SAACtB,GACpB,EAAKqB,SAAS,CACVD,eAAgBpB,EAAMe,OAAOQ,SA/DvB,EAqEdC,YAAc,SAACxB,GACX,EAAKqB,SAAS,CACVI,MAAOzB,EAAMe,OAAOQ,SAvEd,EA4EdG,WAAa,SAAC1B,GACV,EAAKqB,SAAS,CACVM,QAAS3B,EAAMe,OAAOQ,SA9EhB,EAqFdK,WAAa,SAAC5B,GAGV,GAFAA,EAAMC,iBAEmB,KAArB,EAAKiB,MAAMO,OAAuC,KAAvB,EAAKP,MAAMS,QAAgB,CACtD,IAAIE,EAAe,CACfZ,YAAa,EAAKC,MAAMC,mBACxBW,KAAM,EAAKZ,MAAMO,MACjBM,MAAO,EAAKb,MAAMS,SAERtC,EAAS2C,WAAWC,MAC5BtB,KAAKkB,GAEX,EAAKR,SAAS,CACVF,mBAAoB,EAAKP,yBACzBQ,eAAe,OACfK,MAAO,GACPE,QAAS,KAGbzB,SAASC,eAAe,cAAcoB,MAAQ,GAC9CrB,SAASC,eAAe,aAAaoB,MAAQ,QAE7CW,MAAM,mCAxGV,IAAIC,EAAc,EAAK3B,kBACnBS,EAAc,EAAKL,yBAJb,OAMV,EAAKM,MAAQ,CACTkB,aAAcD,EACdhB,mBAAoBF,EACpBG,eAAe,OACfK,MAAO,GACPE,QAAS,IAXH,E,sEAiHJ,IAAD,OACL,OACI,6BAASX,GAAG,WAAWqB,UAAU,YAC7B,yBAAKA,UAAU,WACX,yBAAKA,UAAU,cACX,yCACA,4BAAQA,UAAU,iBAAiBC,QAASC,KAAKxC,cAAc,uBAAGsC,UAAU,0BAGhF,0BAAMG,OAAO,UACT,8BAAUxB,GAAG,WAAWqB,UAAU,yBAC9B,4BAAQA,UAAU,WAAlB,kCAEIE,KAAKrB,MAAMkB,aAAaK,KAAK,SAACC,GAC1B,OACI,4BAAQC,IAAKD,EAAOL,UAAU,cAAcd,MAAO,EAAKL,MAAMC,mBAAmBuB,GAAQtC,MAAO,CAACwC,WAAY,EAAK1B,MAAMC,mBAAmBuB,IAAS1B,GAAI0B,EAAOJ,QAAS,EAAKzB,wBAM7L,8BAAUwB,UAAU,kBAChB,4BAAQA,UAAU,WAAlB,mBAEA,2BAAOjC,MAAO,CAACwC,WAAY,QAASP,UAAU,aAAaQ,QAAQ,SAAQ,uBAAGR,UAAU,WAAb,UAG3E,2BAAOS,KAAK,QAAQ9B,GAAG,QAAQc,KAAK,UAAUP,MAAM,OAAOc,UAAU,UAAUC,QAASC,KAAKjB,qBAAsByB,gBAAc,IAEjI,2BAAO3C,MAAO,CAAEwC,WAAY,WAAaP,UAAU,aAAaQ,QAAQ,UAAS,uBAAGR,UAAU,WAAb,WAGjF,2BAAOS,KAAK,QAAQ9B,GAAG,SAASc,KAAK,UAAUP,MAAM,UAAUc,UAAU,UAAUC,QAASC,KAAKjB,uBAEjG,2BAAOlB,MAAO,CAAEwC,WAAY,QAAWP,UAAU,aAAaQ,QAAQ,SAAQ,uBAAGR,UAAU,WAAb,UAG9E,2BAAOS,KAAK,QAAQ9B,GAAG,QAAQc,KAAK,UAAUP,MAAM,OAAOc,UAAU,UAAUC,QAASC,KAAKjB,uBAE7F,2BAAOlB,MAAO,CAAEwC,WAAY,WAAcP,UAAU,aAAaQ,QAAQ,QAAO,uBAAGR,UAAU,WAAb,SAGhF,2BAAOS,KAAK,QAAQ9B,GAAG,OAAOc,KAAK,UAAUP,MAAM,UAAUc,UAAU,UAAUC,QAASC,KAAKjB,uBAE/F,2BAAOlB,MAAO,CAAEwC,WAAY,WAAcP,UAAU,aAAaQ,QAAQ,QAAO,uBAAGR,UAAU,WAAb,SAGhF,2BAAOS,KAAK,QAAQ9B,GAAG,OAAOc,KAAK,UAAUP,MAAM,UAAUc,UAAU,UAAUC,QAASC,KAAKjB,uBAE/F,2BAAOlB,MAAO,CAAEwC,WAAY,WAAcP,UAAU,aAAaQ,QAAQ,QAAO,uBAAGR,UAAU,WAAb,SAGhF,2BAAOS,KAAK,QAAQ9B,GAAG,OAAOc,KAAK,UAAUP,MAAM,UAAUc,UAAU,UAAUC,QAASC,KAAKjB,uBAE/F,2BAAOlB,MAAO,CAAEwC,WAAY,WAAcP,UAAU,aAAaQ,QAAQ,UAAS,uBAAGR,UAAU,WAAb,WAGlF,2BAAOS,KAAK,QAAQ9B,GAAG,SAASc,KAAK,UAAUP,MAAM,UAAUc,UAAU,UAAUC,QAASC,KAAKjB,uBAEjG,2BAAOlB,MAAO,CAAEwC,WAAY,WAAcP,UAAU,aAAaQ,QAAQ,OAAM,uBAAGR,UAAU,WAAb,QAG/E,2BAAOS,KAAK,QAAQ9B,GAAG,MAAMc,KAAK,UAAUP,MAAM,UAAUc,UAAU,UAAUC,QAASC,KAAKjB,uBAE9F,2BAAOlB,MAAO,CAAEwC,WAAY,WAAcP,UAAU,aAAaQ,QAAQ,WAAU,uBAAGR,UAAU,WAAb,YAGnF,2BAAOS,KAAK,QAAQ9B,GAAG,UAAUc,KAAK,UAAUP,MAAM,UAAUc,UAAU,UAAUC,QAASC,KAAKjB,uBAElG,2BAAOlB,MAAO,CAAEwC,WAAY,WAAcP,UAAU,aAAaQ,QAAQ,UAAS,uBAAGR,UAAU,WAAb,WAGlF,2BAAOS,KAAK,QAAQ9B,GAAG,SAASc,KAAK,UAAUP,MAAM,UAAUc,UAAU,UAAUC,QAASC,KAAKjB,wBAGrG,yBAAKe,UAAU,kBACX,2BAAOQ,QAAQ,aAAaR,UAAU,WAAtC,kBACA,2BAAOrB,GAAG,aAAa8B,KAAK,OAAOE,YAAY,iBAAiBC,UAAU,KAAKC,UAAQ,EAACC,SAAUZ,KAAKf,cAEvG,2BAAOqB,QAAQ,YAAYR,UAAU,WAArC,kBACA,2BAAOrB,GAAG,YAAY8B,KAAK,OAAOE,YAAY,iBAAiBC,UAAU,KAAKC,UAAQ,EAACC,SAAUZ,KAAKb,cAG1G,4BAAQW,UAAU,UAAUC,QAASC,KAAKX,YAA1C,aAjFZ,S,GA7HWwB,aCsFRC,G,kBA9Eb,aAAe,IAAD,8BACZ,+CAOFC,gBAAkB,SAACtD,GACDE,SAASC,eAAe,YAChCC,MAAMC,KAAO,IACrBH,SAASI,qBAAqB,QAAQ,GAAGF,MAAMG,SAAW,UAT1D,EAAKW,MAAQ,CACXqC,cAAe,IAHL,E,iFAeO,IAAD,OACJlE,EAAS2C,WAAWC,MAC5BuB,GAAG,SAAS,SAACC,GACjB,IAAIC,EAAW,GAEf,IAAK,IAAIC,KAAYF,EAAKG,MACxBF,EAAS/C,KAAK8C,EAAKG,MAAMD,IAG3B,EAAKtC,SAAS,CACZkC,cAAeG,S,+BAMnB,OACE,yBAAKrB,UAAU,OACb,gCACE,oDACA,4BAAQA,UAAU,eAAeC,QAASC,KAAKe,iBAA/C,mBAGF,8BAEE,kBAAC,EAAD,MAGA,6BAASjB,UAAU,YACjB,wBAAIA,UAAU,mBAEVE,KAAKrB,MAAMqC,cAAcd,KAAK,SAACoB,GAC7B,OACE,4BACE,4BAAKA,EAAQ/B,MACb,yBAAKO,UAAU,gBAEXwB,EAAQ5C,YAAYwB,KAAI,SAACqB,GACvB,OACE,yBAAK1D,MAAO,CAACwC,WAAYkB,SAKjC,4BAAKD,EAAQ9B,YAhBzB,MAyBF,gCACE,mE,GAzEWqB,cCKDW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASnE,SAASC,eAAe,SD2H3C,kBAAmBmE,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a47d264c.chunk.js","sourcesContent":["// firebase.js\nimport firebase from 'firebase';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDZaz9EEFRjf5fhYEiLHRjHoX5cEG39TYg\",\n    authDomain: \"public-pixel-gallery.firebaseapp.com\",\n    databaseURL: \"https://public-pixel-gallery.firebaseio.com\",\n    projectId: \"public-pixel-gallery\",\n    storageBucket: \"public-pixel-gallery.appspot.com\",\n    messagingSenderId: \"79919068692\",\n    appId: \"1:79919068692:web:b8598345ffe172b8641901\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport firebase from './firebase.js';\n\nclass Section1 extends Component {\n\n    // default button ids and default white colour is assigned \n    //  to all generated pixel buttons.\n    // state contains the following:\n    //   - an array (length 144) of button id numbers, 0-143\n    //   - an array (length 144) of respective button colours\n    //      which are initialized to #fff at start.\n    //   - a default selected radio colour, #fff.\n    //   - art piece title and authour set to \"\".\n    constructor() {\n        super();\n\n        let buttonArray = this.generateButtons();\n        let colourArray = this.generateDefaultColours();\n        \n        this.state = {\n            buttonPixels: buttonArray,\n            buttonPixelColours: colourArray,\n            selectedColour: `#fff`,\n            title: \"\",\n            authour: \"\", \n        }\n    }\n\n    // hides pixel art creation section, re-revealing the gallery\n    hideSection1 = (event) => {\n        event.preventDefault();\n        const element = document.getElementById(\"section1\");\n        element.style.left = \"-100vw\";\n        document.getElementsByTagName('html')[0].style.overflow = \"scroll\";\n    }\n\n    // at start, 144 pixel buttons are generated and assigned to a square grid\n    generateButtons = () => {\n        const max = 144;\n        const tempArray = [];\n        for (let x = 0; x < max; x++) {\n            tempArray.push(x);\n        }\n        return(tempArray);\n    }\n\n    // at start, 144 default colours of #fff are assigned to each button and the \n    //  array that tracks changes\n    generateDefaultColours = () => {\n        const max = 144;\n        const tempArray = [];\n        const defaultColour = `#fff`\n        for (let x = 0; x < max; x++) {\n            tempArray.push(defaultColour);\n        }\n        return (tempArray);\n    }\n\n    // when clicked, the target button is assigned the colour value corresponding \n    //  to the currently selected radio button value.\n    // this value is passed on to the array in state that will eventually be pushed\n    //  to firebase.\n    changeButtonValue = (event) => {\n        event.preventDefault();\n        let position = event.target.id;\n        let colourArray = this.state.buttonPixelColours;\n        colourArray[position] = this.state.selectedColour;\n        this.setState({\n            buttonPixelColours: colourArray,\n        });\n        \n    }\n\n    // the currently selected radio colour is updated in state.\n    changeSelectedColour = (event) => {\n        this.setState({\n            selectedColour: event.target.value,\n        });\n        // event.target.previousSibling.style.border = \"3px solid gold\";\n    }\n\n    // tracks changes to the title text input, state is updated accordingly\n    changeTitle = (event) => {\n        this.setState({\n            title: event.target.value,\n        });\n    }\n\n    // tracks changes to the authour name text input, state is updated accordingly\n    changeName = (event) => {\n        this.setState({\n            authour: event.target.value,\n        });\n    }\n\n    // if the title and name aren't \"\", all state info is made into an art object\n    //  and pushed to firebase, on render this new information will be displayed \n    //  on the main gallery page.\n    publishArt = (event) => {\n        event.preventDefault();\n\n        if (this.state.title !== \"\" && this.state.authour !== \"\") {\n            let newArtObject = {\n                colourArray: this.state.buttonPixelColours,\n                name: this.state.title,\n                maker: this.state.authour,\n            }\n            const dbRef = firebase.database().ref();\n            dbRef.push(newArtObject);\n\n            this.setState({\n                buttonPixelColours: this.generateDefaultColours(),\n                selectedColour: `#fff`,\n                title: \"\",\n                authour: \"\",\n            });\n\n            document.getElementById('titleInput').value = \"\";\n            document.getElementById('nameInput').value = \"\";\n        } else {\n            alert('Please input a title and name.')\n        }\n\n        \n    }\n\n    render() {\n        return(\n            <section id=\"section1\" className=\"section1\">\n                <div className=\"wrapper\">\n                    <div className=\"flexParent\">\n                        <h2>make art!</h2>\n                        <button className=\"cancelPixelArt\" onClick={this.hideSection1}><i className=\"fas fa-window-close\"></i></button>\n                    </div>\n\n                    <form action=\"submit\">\n                        <fieldset id=\"artMaker\" className=\"artMaker artContainer\">\n                            <legend className=\"sr-only\">here you can colour the pixels</legend>\n                            {\n                                this.state.buttonPixels.map( (thing) => {\n                                    return (\n                                        <button key={thing} className=\"buttonPixel\" value={this.state.buttonPixelColours[thing]} style={{background: this.state.buttonPixelColours[thing]}} id={thing} onClick={this.changeButtonValue}></button>\n                                    );\n                                })\n                            }\n                        </fieldset>\n\n                        <fieldset className=\"radioContainer\">\n                            <legend className=\"sr-only\">select a colour</legend>\n                            \n                            <label style={{background: '#fff'}} className=\"radioLabel\" htmlFor=\"white\"><p className=\"sr-only\">\n                                white\n                            </p></label>\n                            <input type=\"radio\" id=\"white\" name=\"palette\" value=\"#fff\" className=\"sr-only\" onClick={this.changeSelectedColour} defaultChecked />\n    \n                            <label style={{ background: '#c0c0c0' }} className=\"radioLabel\" htmlFor=\"silver\"><p className=\"sr-only\">\n                                silver\n                            </p></label>\n                            <input type=\"radio\" id=\"silver\" name=\"palette\" value=\"#c0c0c0\" className=\"sr-only\" onClick={this.changeSelectedColour} />\n                            \n                            <label style={{ background: '#000' }}  className=\"radioLabel\" htmlFor=\"black\"><p className=\"sr-only\">\n                                black\n                            </p></label>\n                            <input type=\"radio\" id=\"black\" name=\"palette\" value=\"#000\" className=\"sr-only\" onClick={this.changeSelectedColour} />\n    \n                            <label style={{ background: '#0000ff' }}  className=\"radioLabel\" htmlFor=\"blue\"><p className=\"sr-only\">\n                                blue\n                            </p></label>\n                            <input type=\"radio\" id=\"blue\" name=\"palette\" value=\"#0000ff\" className=\"sr-only\" onClick={this.changeSelectedColour} />\n    \n                            <label style={{ background: '#00ffff' }}  className=\"radioLabel\" htmlFor=\"aqua\"><p className=\"sr-only\">\n                                aqua\n                            </p></label>\n                            <input type=\"radio\" id=\"aqua\" name=\"palette\" value=\"#00ffff\" className=\"sr-only\" onClick={this.changeSelectedColour} />\n    \n                            <label style={{ background: '#00ff00' }}  className=\"radioLabel\" htmlFor=\"lime\"><p className=\"sr-only\">\n                                lime\n                            </p></label>\n                            <input type=\"radio\" id=\"lime\" name=\"palette\" value=\"#00ff00\" className=\"sr-only\" onClick={this.changeSelectedColour} />\n    \n                            <label style={{ background: '#ffff00' }}  className=\"radioLabel\" htmlFor=\"yellow\"><p className=\"sr-only\">\n                                yellow\n                            </p></label>\n                            <input type=\"radio\" id=\"yellow\" name=\"palette\" value=\"#ffff00\" className=\"sr-only\" onClick={this.changeSelectedColour} />\n    \n                            <label style={{ background: '#ff0000' }}  className=\"radioLabel\" htmlFor=\"red\"><p className=\"sr-only\">\n                                red\n                            </p></label>\n                            <input type=\"radio\" id=\"red\" name=\"palette\" value=\"#ff0000\" className=\"sr-only\" onClick={this.changeSelectedColour} />\n    \n                            <label style={{ background: '#ff00ff' }}  className=\"radioLabel\" htmlFor=\"fuchsia\"><p className=\"sr-only\">\n                                fuchsia\n                            </p></label>\n                            <input type=\"radio\" id=\"fuchsia\" name=\"palette\" value=\"#ff00ff\" className=\"sr-only\" onClick={this.changeSelectedColour} />\n    \n                            <label style={{ background: '#800080' }}  className=\"radioLabel\" htmlFor=\"purple\"><p className=\"sr-only\">\n                                purple\n                            </p></label>\n                            <input type=\"radio\" id=\"purple\" name=\"palette\" value=\"#800080\" className=\"sr-only\" onClick={this.changeSelectedColour} />\n                        </fieldset>\n\n                        <div className=\"inputContainer\">\n                            <label htmlFor=\"titleInput\" className=\"sr-only\">art title here</label>\n                            <input id=\"titleInput\" type=\"text\" placeholder=\"art title here\" maxLength=\"15\" required onChange={this.changeTitle}/>\n    \n                            <label htmlFor=\"nameInput\" className=\"sr-only\">your name here</label>\n                            <input id=\"nameInput\" type=\"text\" placeholder=\"your name here\" maxLength=\"18\" required onChange={this.changeName}/>\n                        </div>\n                        \n                        <button className=\"publish\" onClick={this.publishArt} >publish</button>\n                    </form>\n                </div> {/* wrapper */}\n\n            </section> // /* section1 */ \n        );\n    }\n}\n\nexport default Section1;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport Section1 from './Section1.js';\nimport './App.css';\n\n\n// the main class of the Public Pixel Gallery App\nclass PPGApp extends Component {\n  \n  // state holds data pulled from firebase;\n  // an array of pixel art objects\n  constructor() {\n    super();\n    this.state = {\n      pixelArtArray: [],\n    }\n  }\n\n  // when make art button is clicked, creation section is displayed\n  displaySection1 = (event) => {\n    const element = document.getElementById(\"section1\");\n    element.style.left = \"0\";\n    document.getElementsByTagName('html')[0].style.overflow = \"hidden\";\n  }\n\n  // data is pulled from firebase and passed to state\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (data) => {\n      let artArray = [];\n      \n      for (let artPiece in data.val()) {\n        artArray.push(data.val()[artPiece]);\n      }\n      \n      this.setState({\n        pixelArtArray: artArray,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>public pixel gallery</h1>\n          <button className=\"makePixelArt\" onClick={this.displaySection1}>make pixel art</button>\n        </header>\n\n        <main>\n          {/* this is the pixel art creation section */}\n          <Section1 />\n\n          {/* this is where all created pixel art (firebase data) is displayed */}\n          <section className=\"section2\">\n            <ul className=\"wrapper gallery\">\n              {\n                this.state.pixelArtArray.map( (artItem) => {\n                  return(\n                    <li>\n                      <h2>{artItem.name}</h2>\n                      <div className=\"artContainer\">\n                        {\n                          artItem.colourArray.map((colour) => {\n                            return (\n                              <div style={{background: colour}}></div>\n                            )\n                          })\n                        }\n                      </div>   \n                      <h3>{artItem.maker}</h3>\n                    </li>\n                  )\n                })\n              }   \n            </ul> {/* /.wrapper */}\n          </section>\n        </main>\n\n        <footer>\n          <h4>copyright lewis brignell 2019</h4>\n        </footer>\n\n      </div>\n    );\n  } // render\n  \n} // PPGApp\n\nexport default PPGApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}